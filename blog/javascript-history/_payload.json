[{"data":1,"prerenderedAt":597},["ShallowReactive",2],{"post":3},{"id":4,"title":5,"body":6,"description":588,"extension":589,"meta":590,"navigation":592,"path":593,"seo":594,"stem":595,"__hash__":596},"blog/blog/javascript-history.md","JavaScript ‚Äî Presente, Passado e Futuro",{"type":7,"value":8,"toc":557},"minimark",[9,13,25,30,49,53,68,72,77,80,83,86,89,92,96,126,129,133,136,139,142,146,150,153,156,159,162,167,170,176,180,183,186,190,193,196,199,202,206,209,212,216,219,222,242,249,252,263,266,274,284,287,290,293,297,300,317,321,324,328,331,334,338,341,344,347,351,354,357,360,364,367,370,373,377,380,383,387,390,394,397,400,403,407,410,413,420,423,430,437,441,444,447,450,454,457,468,471,474,478],[10,11,5],"h1",{"id":12},"javascript-presente-passado-e-futuro",[14,15,16,17,24],"p",{},"Esse texto √© a transcri√ß√£o da minha palestra √† FATEC de Bragan√ßa Paulista, adaptada para o formato do blog para facilitar a leitura. Voc√™ pode assistir a grava√ß√£o da palestra ",[18,19,23],"a",{"href":20,"rel":21},"https://youtu.be/Bf471dYOdlw?t=10",[22],"nofollow","aqui","!",[26,27,29],"h2",{"id":28},"quem-sou-eu","Quem sou eu?",[31,32,33,37,40,43,46],"ul",{},[34,35,36],"li",{},"Carlos Mendon√ßa, 22 anos",[34,38,39],{},"Bacharel em Ci√™ncia da Computa√ß√£o pela UAM",[34,41,42],{},"Trabalho a 5 anos na √°rea, estudo programa√ß√£o a 8",[34,44,45],{},"Apaixonado por matem√°tica, computa√ß√£o e m√∫sica",[34,47,48],{},"Talvez um pouco obcecado por Linguagens de Programa√ß√£o e Compiladores üëÄ",[26,50,52],{"id":51},"estrutura","Estrutura",[54,55,56,59,62,65],"ol",{},[34,57,58],{},"Breve hist√≥ria de como JS surgiu e evoluiu",[34,60,61],{},"ES6 e suas duas principais funcionalidades",[34,63,64],{},"O que comp√µe o ecossistema atual",[34,66,67],{},"O que o futuro pode trazer",[26,69,71],{"id":70},"passado-nascimento-e-crescimento","Passado ‚Äî Nascimento e Crescimento",[73,74,76],"h3",{"id":75},"qual-era-o-contexto-da-√©poca","Qual era o contexto da √©poca?",[14,78,79],{},"√â 1995 e a internet ainda estava em per√≠odo de ado√ß√£o pelo p√∫blico geral. O primeiro navegador com interface gr√°fica amplamente utilizado, o Mosaic, tinha sido lan√ßado apenas dois anos atr√°s. Um grupo dos principais desenvolvedores do Mosaic decidiram fundar a Netscape e criar uma evolu√ß√£o do navegador Mosaic, o Netscape Navigator.",[14,81,82],{},"O Navigator era melhor que o Mosaic, mas a internet ainda n√£o havia mudado. Todo conte√∫do da internet ainda era composto de p√°ginas de texto e imagens est√°ticas, mas havia muito interesse popular para a cria√ß√£o de bot√µes que brilham e pulam na tela.",[14,84,85],{},"A Netscape ouviu esse clamor popular e abriu duas frentes para atender essa demanda: Em uma, tentaram colaborar com a Sun Microsystems, que na √©poca estava desenvolvendo o Java, para colocar Java no navegador. Na outra, eles contrataram Brendan Eich, que pretendia portar a linguagem Scheme para o navegador, que j√° era uma linguagem conhecida na √©poca e que era relativamente f√°cil de ser portada devido a sua simplicidade.",[14,87,88],{},"A ger√™ncia da Netscape, entretanto, se perguntou se a internet realmente precisava de duas linguagens, e acabaram optando por manter apenas uma. S√≥ que para defender sua iniciativa de usar o JavaScript (que naquela √©poca ainda n√£o tinha esse nome) eles precisavam de um prot√≥tipo de uma linguagem de scripting (como o Scheme) que tivesse uma sintaxe diferente (parecida com a do Java)",[14,90,91],{},"Assim, em 10 dias, Brendan Eich projetou a linguagem Mocha em maio de 95, que foi renomeada para LiveScript por motivos legais e inclu√≠da no beta do Netscape Navigator 2 no final de novembro com pouqu√≠ssimas mudan√ßas desde sua concep√ß√£o inicial. Em dezembro ocorreu o lan√ßamento oficial do navegador, e o LiveScript foi renomeado para JavaScript como jogada de marketing para surfar na onda que o Java estava criando na √©poca.",[73,93,95],{"id":94},"os-anos-seguintes","Os anos seguintes",[31,97,98,101,109,112,115,123],{},[34,99,100],{},"1995 ‚Äî No mesmo ano a Microsoft lan√ßou o Internet Explorer, dando in√≠cio a uma ‚Äúcorrida espacial‚Äù entre os dois navegadores",[34,102,103,104],{},"1996 ‚Äî No ano seguinte, a Microsoft apresentou o JScript, uma c√≥pia do JavaScript feita por meio de engenharia reversa, al√©m de suporte inicial para CSS e extens√µes do HTML.\n",[31,105,106],{},[34,107,108],{},"Essas implementa√ß√µes eram consideravelmente diferentes entre diferentes fabricantes, o que gerou a ado√ß√£o de selos como ‚Äúmelhor apresentado no Netscape‚Äù ou ‚Äúmelhor apresentado no Internet Explorer‚Äù",[34,110,111],{},"1997 ‚Äî JavaScript √© aceito na ECMA International para padroniza√ß√£o",[34,113,114],{},"1998 ‚Äî Lan√ßamento do ECMAScript 2",[34,116,117,118],{},"1999 ‚Äî Lan√ßamento do ECMAScript 3\n",[31,119,120],{},[34,121,122],{},"Netscape √© comprada em 99 pela AOL, mas deixa um presentinho para o mundo: A Organiza√ß√£o Mozilla, que iria criar a Funda√ß√£o Mozilla em 2003 como forma de se sustentar sem apoio da AOL que estava cortando verbas do projeto.",[34,124,125],{},"2000 ‚Äî In√≠cio dos trabalhos para o ECMAScript 4",[14,127,128],{},"Enquanto isso na Microsoft, o Internet Explorer tinha 95% de controle do mercado de navegadores no come√ßo dos anos 2000, tornando o JScript o padr√£o efetivamente utilizado para desenvolvimento web. Eles at√© contribu√≠ram com a cria√ß√£o do padr√£o ECMAScript no come√ßo, mas abandonaram o projeto, estagnando o desenvolvimento da vers√£o 4 do padr√£o.",[73,130,132],{"id":131},"enfim-um-novo-padr√£o","Enfim, um novo padr√£o",[14,134,135],{},"√â 2005 e o ECMAScript 4 nunca aconteceu por conta da falta de ado√ß√£o da maior fabricante da √©poca, a Microsoft. N√£o quer dizer que esfor√ßos foram em v√£o, nesse mesmo tempo algumas tecnologias important√≠ssimas surgiram como Ajax e Event Listeners, iniciando uma ‚ÄúEra Renascentista‚Äù do JavaScript, com a cria√ß√£o de ferramentas como jQuery, Prototype, Dojo Toolkit, e MooTools.",[14,137,138],{},"Em 2008 a Google anunciou seu motor de JavaScript chamado V8, que apresentava uma performance estupidamente melhor que a da concorr√™ncia por conta de sua compila√ß√£o just-in-time.",[14,140,141],{},"Em Julho todas as fabricantes da √©poca (Microsoft, Mozilla, e Google) se reuniram em Oslo para resolver suas disparidades de ado√ß√£o do padr√£o e promover a evolu√ß√£o da linguagem. O resultado foi a cria√ß√£o do padr√£o ECMAScript 5 no in√≠cio de 2009",[26,143,145],{"id":144},"presente-ecmascript-6-m√≥dulos-e-promises","Presente ‚Äî ECMAScript 6: M√≥dulos e Promises",[73,147,149],{"id":148},"e-agora-jos√©","E agora, Jos√©?",[14,151,152],{},"A linguagem padronizou, a competi√ß√£o acabou, o povo t√° contente, a comunidade t√° produzindo, e agora, Jos√©?",[14,154,155],{},"A linguagem ainda tinha alguns s√©rios problemas a bom tempo, problemas que ainda impediam que o JS fosse considerada uma linguagem moderna de fato, e o ES6 introduziu muitas corre√ß√µes que estavam pendentes desde 1995, o que explica parte da espera de 7 anos pela especifica√ß√£o.",[14,157,158],{},"O ES6 tamb√©m introduziu mais funcionalidades do que posso listar aqui, mas algumas das mais expressivas foram fun√ß√µes flecha, classes, vari√°veis de escopo de bloco, constantes nativas, desestrutura√ß√£o e muitas outras.",[14,160,161],{},"Mas pessoalmente, acredito que as duas maiores mudan√ßas que foram introduzidas foram a cria√ß√£o de M√≥dulos e Promises, pois elas mudam fundamentalmente a forma como n√≥s estruturamos grandes cole√ß√µes de c√≥digo fonte e como lidamos com c√≥digo ass√≠ncrono, duas partes fundamentais para a cria√ß√£o de c√≥digo manuten√≠vel e perform√°tico.",[163,164,166],"h4",{"id":165},"breve-pausa-manutenibilidade","Breve pausa ‚Äî Manutenibilidade",[14,168,169],{},"Manutenibilidade √© definida como",[171,172,173],"blockquote",{},[14,174,175],{},"uma caracter√≠stica inerente a um projeto de sistema ou produto, e se refere √† facilidade, precis√£o, seguran√ßa e economia na execu√ß√£o de a√ß√µes de manuten√ß√£o nesse sistema ou produto (BLANCHARD, Benjamin. Logistics engineering and\nmanagement. 4th ed. Englewwod Cliffs: Prentice Hall, 1992. p. 15)",[73,177,179],{"id":178},"m√≥dulos","M√≥dulos",[14,181,182],{},"Toda boa linguagem possui alguma forma de dividir grandes sec√ß√µes de c√≥digo em parcelas menores com prop√≥sito espec√≠fico, faz parte do princ√≠pio SOLID. Antes do ES6, aplica√ß√µes dependiam ou de arquivos monol√≠ticos com todas as funcionalidades implementadas em um s√≥ lugar, ou do uso de bundlers como Webpack, que agrupavam v√°rios arquivos JS em um s√≥, que era servido para o navegador para ser executado.",[14,184,185],{},"Com a introdu√ß√£o de M√≥dulos, programadores agora podem nativamente quebrar uma aplica√ß√£o em v√°rios pequenos arquivos, cada um exportando uma pequena funcionalidade utilizada para compor o todo.",[73,187,189],{"id":188},"promises","Promises",[14,191,192],{},"C√≥digo ass√≠ncrono √© um dos pilares de qualquer aplica√ß√£o web moderna, j√° que as informa√ß√µes apresentadas para o usu√°rio raramente s√£o armazenadas no navegador e devem ser buscadas em algum tipo de servi√ßo externo por meio de requisi√ß√µes HTTP.",[14,194,195],{},"Essas requisi√ß√µes devem ser realizadas de forma ass√≠ncrona para garantir uma boa experi√™ncia para o usu√°rio (lembram do Ajax?)",[14,197,198],{},"At√© a cria√ß√£o das Promises, o √∫nico mecanismo que o JS oferecia para lidar com tal estrutura eram os callbacks, que elevavam a complexidade do c√≥digo e normalmente levavam a algo chamado ‚Äúcallback hell‚Äù, que s√£o pir√¢mides horizontais de fun√ß√µes aninhadas utilizadas para lidar com sequ√™ncias intermin√°veis de chamadas ass√≠ncronas.",[14,200,201],{},"Com as Promises essas pir√¢mides se tornam sequ√™ncias de chamadas encadeadas, n√£o aninhadas, melhorando a legibilidade e a manutenibilidade do c√≥digo.",[26,203,205],{"id":204},"presente-frameworks-e-js-server-side","Presente ‚Äî Frameworks e JS Server-side",[14,207,208],{},"Promises e M√≥dulos s√£o legais e tudo mais, mas se voc√™ se tornar um desenvolvedor JS hoje em dia, dificilmente vai trabalhar exclusivamente com JS nativo e dificilmente vai escrever todas suas funcionalidades do zero. Chances s√£o que voc√™ vai utilizar frameworks e bibliotecas prontas para construir suas aplica√ß√µes, e portanto √© importante saber pra que frameworks servem e o que s√£o, e onde encontrar bibliotecas de terceiros.",[14,210,211],{},"Falaremos brevemente de outra aplica√ß√£o muito comum do JS, o JS server-side, e tamb√©m de uma linguagem chamada TypeScript, uma ‚Äúextens√£o‚Äù do JavaScript que oferece tipagem forte e est√°tica muito utilizada no mercado e na comunidade.",[73,213,215],{"id":214},"frameworks-pra-que-servem","Frameworks ‚Äî Pra que servem?",[14,217,218],{},"Antes de definir o que √© uma framework, quero que voc√™s entendam qual a necessidade que as frameworks atendem. Dessa forma, quando eu definir do que uma framework √© composta, fica claro o porque ela √© composta daquilo.",[14,220,221],{},"Suponhamos que voc√™ queira fazer um quadrado mudar de cor quando o usu√°rio clicar num bot√£o. Se voc√™ usar somente JS nativo ao navegador isso vai requerer bastante trabalho. Voc√™ precisa:",[31,223,224,227,230,233,236,239],{},[34,225,226],{},"Criar uma fun√ß√£o que ser√° executada quando o bot√£o for clicado",[34,228,229],{},"Essa fun√ß√£o precisa de uma refer√™ncia do quadrado que mudar√° de cor",[34,231,232],{},"Criar a l√≥gica de mudan√ßa de cor do quadrado",[34,234,235],{},"Obter uma refer√™ncia do bot√£o",[34,237,238],{},"Associar essa fun√ß√£o ao evento do bot√£o sendo clicado",[34,240,241],{},"Executar essa associa√ß√£o no momento certo durante o ciclo de renderiza√ß√£o da p√°gina",[14,243,244,245],{},"E o mais importante, repetir todo esse trabalho ",[246,247,248],"strong",{},"para todos os bot√µes de todas as suas p√°ginas.",[14,250,251],{},"Basta dizer, √© bastante trabalho para algo relativamente simples. Especialmente considerando que tem alguns passos disso que parecem ser bons candidatos para abstra√ß√£o:",[31,253,254,257,260],{},[34,255,256],{},"Obter a refer√™ncia do elemento",[34,258,259],{},"Associa√ß√£o da fun√ß√£o",[34,261,262],{},"Timing da associa√ß√£o",[14,264,265],{},"Se n√≥s eliminarmos esses passos da nossa l√≥gica, tudo que resta fazer para cada bot√£o √©:",[31,267,268,271],{},[34,269,270],{},"Criar a l√≥gica que deve ser executada",[34,272,273],{},"Dizer quando isso deve acontecer",[14,275,276,277,280,281],{},"O que tornaria nosso trabalho muito mais interessante! Essa diferen√ßa entre o antes e o depois √© a diferen√ßa entre ",[246,278,279],{},"c√≥digo imperativo"," e ",[246,282,283],{},"c√≥digo declarativo.",[14,285,286],{},"No c√≥digo imperativo o programador deve definir todos os passos que ser√£o executados para que uma tarefa seja conclu√≠da, e normalmente √© a forma que n√≥s aprendemos a programar nas nossas primeiras aulas de constru√ß√£o de algoritmos.",[14,288,289],{},"C√≥digo declarativo, por outro lado, n√£o se importa com as especificidades de como realizar algumas tarefas, e permite que voc√™ se concentre mais no objetivo final do que em cada passo individual.",[14,291,292],{},"Tudo que frameworks visam fazer √© justamente isso: tornar c√≥digo mais declarativo te oferecendo mais funcionalidades prontas.",[73,294,296],{"id":295},"frameworks-o-que-s√£o","Frameworks ‚Äî O que s√£o?",[14,298,299],{},"Agora que definimos qual o objetivo de uma framework, as funcionalidades que uma framework normalmente oferecem fazem mais sentido:",[31,301,302,305,308,311,314],{},[34,303,304],{},"F√°cil reutiliza√ß√£o de c√≥digo (Componentes)",[34,306,307],{},"Abstra√ß√µes para intera√ß√µes comuns como cliques e digita√ß√£o (Binds)",[34,309,310],{},"Roteamento de p√°ginas (SPAs)",[34,312,313],{},"Valores reativos (Reatividade)",[34,315,316],{},"Gerenciamento de estado global da aplica√ß√£o (Stores, Contexto)",[163,318,320],{"id":319},"componentes","Componentes",[14,322,323],{},"Uma interface √© feita de componentes da mesma forma que uma casa √© feita de quartos. Componentiza√ß√£o √© bem comum nas frameworks modernas, e te permite criar peda√ßos que voc√™ pode reutilizar conforme monta uma interface, ou simplesmente uma forma de quebrar uma interface complexa em peda√ßos menores e melhor compreendidos, sem a necessidade de reutiliza√ß√£o.",[163,325,327],{"id":326},"stores-binding-e-reatividade","Stores, Binding e Reatividade",[14,329,330],{},"As tarefas que o desenvolvedor web mais realiza talvez sejam obter e exibir informa√ß√£o para o usu√°rio. Fazer isso de forma nativa no navegador √© bem trabalhoso e requer muito c√≥digo ‚Äúboilerplate‚Äù (c√≥digo sem utilidade pr√°tica mas que √© necess√°rio para o funcionamento da linguagem)",[14,332,333],{},"Ferramentas modernas normalmente oferecem algum tipo de ‚Äúsistema de reatividade‚Äù que te permitem ‚Äúinjetar‚Äù valores din√¢micos na constru√ß√£o da interface e sincronizar valores da aplica√ß√£o com os valores dos campos de entrada do usu√°rio, atualizando a interface em tempo real conforme o estado da aplica√ß√£o muda e eliminando a necessidade de c√≥digo boilerplate para intera√ß√£o com o usu√°rio.",[163,335,337],{"id":336},"single-page-applications-ou-spas","Single Page Applications ou SPAs",[14,339,340],{},"Essa √© uma tend√™ncia moderna na constru√ß√£o de aplica√ß√µes web: Oferecer uma experi√™ncia de ‚Äúp√°gina √∫nica‚Äù para o usu√°rio. Isto √©: O usu√°rio dificilmente muda de p√°gina de forma efetiva, o que acontece √© uma atualiza√ß√£o de estado.",[14,342,343],{},"As diferentes p√°ginas de uma aplica√ß√£o s√£o constru√≠das como janelas de um mesmo painel, e quando um usu√°rio ‚Äúnavega‚Äù para uma nova p√°gina o sistema de roteamento do framework s√≥ substitui o que est√° sendo exibido para o usu√°rio, podendo at√© realizar uma transi√ß√£o suave entre as duas interfaces.",[14,345,346],{},"Dessa forma o usu√°rio sempre tem a ‚Äúexperi√™ncia‚Äù de estar na mesma p√°gina e interagir com pain√©is diferentes da mesma aplica√ß√£o, ao inv√©s de navegar entre diferentes p√°ginas de um mesmo site.",[73,348,350],{"id":349},"bibliotecas-e-o-reposit√≥rio-npm","Bibliotecas e o reposit√≥rio npm",[14,352,353],{},"Al√©m das frameworks, √© bem comum utilizarmos bibliotecas ou ‚Äúpacotes‚Äù durante o desenvolvimento. Assim como o Gradle no Java, o pip no Python e o Gems no Ruby, o JavaScript tamb√©m tem seu gerenciador de pacotes, o npm.",[14,355,356],{},"A principal funcionalidade do npm (Node Package Manager) √© instalar, remover e gerenciar os pacotes de um projeto gerenciado por ele. Pacotes s√£o armazenados dentro do Reposit√≥rio do npm, que atualmente conta com pouco mais de 1 milh√£o e 800 mil pacotes. Esses pacotes incluem desde coisas simples como bibliotecas que te dizem se algo √© um n√∫mero e se ele √© par ou √≠mpar at√© frameworks completas e programas de linha de comando poderos√≠ssimas (e at√© mesmo frameworks para criar programas de linha de comando!)",[14,358,359],{},"Qualquer um pode contribuir com o reposit√≥rio e utilizar do reposit√≥rio, o que torna ele uma ferramenta incrivelmente poderosa para quem quer fazer parte da comunidade JS de forma f√°cil.",[73,361,363],{"id":362},"server-side-e-nodejs","Server-side e Node.js",[14,365,366],{},"Falando em npm, o que √© o Node.js afinal?",[14,368,369],{},"Em 2009, um ano ap√≥s o lan√ßamento da V8, Ryan Dahl apresentou o Node.js em uma confer√™ncia como uma alternativa ao Apache HTTP Server. O Node √© um runtime de JS independente, baseado no motor V8 do Chrome que roda nos servidores, e possibilita a cria√ß√£o de servidores web de alta performance sem utilizar threading manual.",[14,371,372],{},"Isso √© gerenciado por meio da estrutura de controle de chamadas ass√≠ncronas n√£o bloqueantes chamada Event Loop, que despacha chamadas ass√≠ncronas para serem processadas por uma thread no plano de fundo, que retornam para uma fila para serem processadas num momento futuro enquanto a main thread realiza processamento s√≠ncrono bloqueante no Event Loop.",[73,374,376],{"id":375},"typescript","TypeScript",[14,378,379],{},"Tudo o que falamos at√© agora foi baseado no JavaScript, que √© uma linguagem din√¢mica e fracamente tipada. O problema √© que isso d√° abertura para poss√≠veis problemas que podem ser evitados com um sistema est√°tico de tipagem, e √© isso que o TypeScript oferece: Tipagem est√°tica no c√≥digo, com tipos explicitamente definidos.",[14,381,382],{},"Al√©m de alguns benef√≠cios √≥bvios que tipagem est√°tica oferece, o TypeScript tem algumas cartas na manga que tornam ele uma ferramenta poderos√≠ssima para alguns problemas, como Template Types, por exemplo, que usam template strings para criar tipos exponencialmente complexos de forma autom√°tica baseados em combina√ß√µes de blocos simples.",[26,384,386],{"id":385},"futuro-vida-eterna","Futuro ‚Äî Vida eterna?",[14,388,389],{},"O ecossistema atual √© bem completo, amplamente utilizado e n√£o carece de variedade nos tipos de problemas que voc√™ enfrenta no dia a dia, mas sabemos que JS √© uma linguagem viva, baseada num padr√£o em constante evolu√ß√£o. Sendo assim, quais vislumbres temos do futuro atualmente?",[73,391,393],{"id":392},"ecmascript-anual","ECMAScript Anual",[14,395,396],{},"Junto com o lan√ßamento do ES6, a ECMA International mudou a forma de criar novas edi√ß√µes do padr√£o. Tecnicamente falando, o ES6 na verdade √© o ES2016, pois com ele o Comit√™ T√©cnico 39 ‚Äî Um grupo seleto de programadores, implementadores, acad√™micos e v√°rios outros respons√°veis por aprovar as propostas para a especifica√ß√£o do ECMAScript ‚Äî apresentou o esquema de lan√ßamentos anuais da especifica√ß√£o.",[14,398,399],{},"N√£o s√≥ passamos a anualmente ter novas funcionalidades na linguagem, mas a especifica√ß√£o passou a ser totalmente aberta a propostas de extens√£o por meio de um processo de inscri√ß√£o na EMCA International e reposit√≥rios no GitHub.",[14,401,402],{},"Algumas das funcionalidades que est√£o em est√°gio 3 (o √∫ltimo est√°gio antes de uma funcionalidade ser considerada finalizada) incluem M√≥dulos JSON, o objeto Temporal, Decoradores de Classe e agrupamento de elementos num array.",[73,404,406],{"id":405},"server-side-rendering","Server Side Rendering",[14,408,409],{},"Desde o surgimento da linguagem performance sempre foi um ponto important√≠ssimo. Com avan√ßos progressivamente mais refinados em motores como a V8 da Google ou o SpiderMonkey da Mozilla, a linguagem chegou num ponto extremamente otimizado atualmente.",[14,411,412],{},"Por√©m, com o passar dos anos surgiram novas m√©tricas de performance que passamos a medir, m√©tricas que levam em considera√ß√£o a experi√™ncia do usu√°rio, como o CLS, que mede o quanto uma p√°gina muda de formato antes de estabilizar no seu layout final.",[14,414,415,416,419],{},"Atualmente, uma das t√©cnicas mais utilizadas para garantir uma boa performance nessas novas m√©tricas √© a ",[246,417,418],{},"Renderiza√ß√£o Server-side",", ou SSR. Com o SSR, voc√™ desenvolve sites como faz√≠amos em PHP ou Ruby, projetando p√°ginas que s√£o servidas diretamente pelo servidor, e s√£o exibidas para o usu√°rio muito mais r√°pido.",[14,421,422],{},"Isso permite que o usu√°rio acessando o site tenha um produto totalmente finalizado muito mais r√°pido, j√° que a p√°gina n√£o √© constru√≠da no navegador antes de ser exibida, mas sim constru√≠da no servidor e exibida para o usu√°rio em sua forma final.",[14,424,425,426,429],{},"Outra t√©cnica √© a ",[246,427,428],{},"Gera√ß√£o de Sites Est√°ticos",", ou SSG. Sites est√°ticos? Mas a ideia de 27 anos atr√°s n√£o era deixar as p√°ginas din√¢micas? Sim! S√≥ que dinamismo invariavelmente custa performance, e correndo o risco de ter um martelo e s√≥ enxergar pregos, nem todas as p√°ginas precisam de dinamismo. Uma p√°gina da Wikip√©dia, por exemplo, √© muito bem atendida por uma p√°gina totalmente est√°tica.",[14,431,432,433,436],{},"Por √∫ltimo temos a ",[246,434,435],{},"Regenera√ß√£o Est√°tica Incremental",", o ISR, que combina o melhor de dois mundos. O SSR renderiza as p√°ginas sob demanda, o SSG gera p√°ginas est√°ticas, o ISR te permite gerar p√°ginas est√°ticas baseadas em dados din√¢micos, que s√£o periodicamente invalidados do cache e atualizados para uma nova tarefa de renderiza√ß√£o de p√°ginas em massa.",[73,438,440],{"id":439},"web3-e-dapps","Web3 e DApps",[14,442,443],{},"Recentemente surgiu um movimento que fala sobre a Web 3.0, uma ‚Äúnova vers√£o da Internet‚Äù baseada em tecnologias e conceitos de blockchain, como criptomoedas e descentraliza√ß√£o. N√£o entrando nos aspectos socioecon√¥micos do assunto, prefiro falar do impacto que isso pode ter nas nossas vidas como desenvolvedores Web.",[14,445,446],{},"Montado em cima do conceito da Web3, h√° o conceito dos DApps, Apps Distribuidos. DApps s√£o aplica√ß√µes que rodam de forma aut√¥noma em uma blockchain, por meio do conceito de Contratos Inteligentes, os Smart Contracts, e n√£o s√£o de nenhuma propriedade individual, distribuindo tokens que representam sua possess√£o de acordo com o algoritmo determinado pelo c√≥digo.",[14,448,449],{},"Como diz o ditado, ‚Äúnuma corrida do ouro, venda p√°s‚Äù, e por mais que eu pessoalmente n√£o seja muito f√£ de cripto e tudo mais, deem uma olhada no Solidity, uma linguagem de alto n√≠vel inspirada pelo C++, Python e JavaScript para implementa√ß√£o de Contratos Inteligentes na blockchain Ethereum.",[73,451,453],{"id":452},"webassembly","WebAssembly",[14,455,456],{},"Por √∫ltimo mas de forma alguma menos importante, temos o WebAssembly.",[14,458,459,460,463,464,467],{},"Se em um lado do espectro da performance do JS n√≥s temos aplica√ß√µes ‚Äúsuper velozes‚Äù como Angular, na extremidade do outro lado temos o WebAssembly, um ",[246,461,462],{},"formato de instru√ß√µes bin√°rias"," ",[246,465,466],{},"pra uma m√°quina virtual baseada em pilha",".",[14,469,470],{},"Em termos leigos, WebAssembly oferece uma plataforma para qual voc√™ pode compilar suas aplica√ß√µes de alta performance escritas em C/C++, Rust, ou qualquer outra linguagem que ofere√ßa um compilador com WebAssembly como plataforma alvo.",[14,472,473],{},"Algumas aplica√ß√µes estupidamente pesadas que rodam em WebAssembly incluem o Figma, AutoCAD Web e at√© jogos feitos na Unity ou Unreal Engine 4 (a partir da vers√£o 4.18)",[26,475,477],{"id":476},"refer√™ncias","Refer√™ncias",[31,479,480,487,494,501,508,515,522,529,536,543,550],{},[34,481,482],{},[18,483,486],{"href":484,"rel":485},"https://webassembly.org/",[22],"Mais informa√ß√µes sobre WebAssembly",[34,488,489],{},[18,490,493],{"href":491,"rel":492},"https://docs.soliditylang.org/en/v0.8.13/",[22],"Site da linguagem Solidity para Smart Contracts",[34,495,496],{},[18,497,500],{"href":498,"rel":499},"https://web.dev/",[22],"Mais informa√ß√µes sobre m√©tricas de performance moderna",[34,502,503],{},[18,504,507],{"href":505,"rel":506},"https://developer.mozilla.org/en-US/",[22],"Boa refer√™ncia para praticamente qualquer assunto da web: CSS, JS, HTML, e muito mais",[34,509,510],{},[18,511,514],{"href":512,"rel":513},"https://github.com/tc39/ecma262/",[22],"Reposit√≥rio das propostas para o ECMAScript",[34,516,517],{},[18,518,521],{"href":519,"rel":520},"https://tc39.es/ecma262/multipage/#sec-intro",[22],"Link para a especifica√ß√£o ECMAScript",[34,523,524],{},[18,525,528],{"href":526,"rel":527},"https://tc39.es/",[22],"Portal do Comit√™ T√©cnico 39",[34,530,531],{},[18,532,535],{"href":533,"rel":534},"https://github.com/nice-registry/all-the-package-repos#stats",[22],"Fonte que usei para a contagem de pacotes do reposit√≥rio npm",[34,537,538],{},[18,539,542],{"href":540,"rel":541},"https://web.archive.org/web/20200227184037/https://speakingjs.com/es5/ch04.html",[22],"Texto que explica em mais detalhes a motiva√ß√£o da Netscape por tr√°s de criar uma nova linguagem",[34,544,545],{},[18,546,549],{"href":547,"rel":548},"http://es6-features.org",[22],"Uma refer√™ncia compacta de todas as funcionalidades novas do ES6",[34,551,552],{},[18,553,556],{"href":554,"rel":555},"https://2021.stateofjs.com/en-US/",[22],"Resultado da pesquisa State Of JavaScript de 2021",{"title":558,"searchDepth":559,"depth":559,"links":560},"",2,[561,562,563,569,574,581,587],{"id":28,"depth":559,"text":29},{"id":51,"depth":559,"text":52},{"id":70,"depth":559,"text":71,"children":564},[565,567,568],{"id":75,"depth":566,"text":76},3,{"id":94,"depth":566,"text":95},{"id":131,"depth":566,"text":132},{"id":144,"depth":559,"text":145,"children":570},[571,572,573],{"id":148,"depth":566,"text":149},{"id":178,"depth":566,"text":179},{"id":188,"depth":566,"text":189},{"id":204,"depth":559,"text":205,"children":575},[576,577,578,579,580],{"id":214,"depth":566,"text":215},{"id":295,"depth":566,"text":296},{"id":349,"depth":566,"text":350},{"id":362,"depth":566,"text":363},{"id":375,"depth":566,"text":376},{"id":385,"depth":559,"text":386,"children":582},[583,584,585,586],{"id":392,"depth":566,"text":393},{"id":405,"depth":566,"text":406},{"id":439,"depth":566,"text":440},{"id":452,"depth":566,"text":453},{"id":476,"depth":559,"text":477},"Transcri√ß√£o da palestra feita durante o Bragan√ßa Tech Day de 2022","md",{"date":591},"2023-05-21",true,"/blog/javascript-history",{"title":5,"description":588},"blog/javascript-history","PNQkxbxspGC29HAhWRuJztcd8MMekwsIxwOlR3CmKqc",1752116405166]